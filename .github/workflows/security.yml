name: 'Security Scanning'

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  schedule:
    - cron: '0 2 * * 1' # Run weekly on Mondays at 2 AM
  workflow_dispatch:

jobs:
  security:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install

      - name: Run Security Audit
        run: |
          # Run npm audit with different levels
          echo "🔍 Running security audit..."
          pnpm audit --audit-level=moderate
          
          # Check for known vulnerabilities
          pnpm audit --json > audit-report.json
          
          # Count vulnerabilities by severity
          echo "📊 Vulnerability Summary:"
          jq -r '.vulnerabilities | to_entries[] | "\(.key): \(.value.length) issues"' audit-report.json 2>/dev/null || echo "No vulnerabilities found"

      - name: Check for Secrets
        run: |
          # Install truffleHog for secret scanning
          pip install truffleHog
          
          # Scan for secrets (excluding node_modules and .git)
          echo "🔐 Scanning for secrets..."
          truffleHog --regex --entropy=False . || true

      - name: Check Dependencies
        run: |
          # Check for outdated dependencies
          echo "📦 Checking for outdated dependencies..."
          pnpm outdated || echo "All dependencies are up to date"
          
          # Check for known vulnerable packages
          echo "🚨 Checking for known vulnerable packages..."
          pnpm audit --audit-level=high

      - name: Validate Package Lock
        run: |
          # Ensure package-lock is up to date
          echo "🔒 Validating package lock..."
          pnpm install --frozen-lockfile

      - name: Check for Malicious Packages
        run: |
          # Install safety for Python dependencies (if any)
          pip install safety
          
          # Check for known malicious packages
          echo "🛡️ Checking for malicious packages..."
          safety check || echo "No Python dependencies found" 